name: 🏋️ 필라테스 자동 예약 v6.1 (주말 로직 수정 + 단순화)

on:
  schedule:
    # 매일 23:55에 실행 (단일 스케줄로 통합)
    - cron: '55 14 * * *'  # 23:55 KST - 메인 실행
  
  workflow_dispatch:
    inputs:
      mode:
        description: '실행 모드'
        required: false
        default: 'auto'
        type: choice
        options:
          - 'auto'      # 자동 판단
          - 'force'     # 강제 실행
          - 'test'      # 테스트 모드
          - 'immediate' # 즉시 실행 (대기 없음)
      target_time:
        description: '목표 실행 시간 (KST, 예: 00:01:00)'
        required: false
        default: '00:01:00'
        type: string

env:
  NODE_VERSION: '20'
  TIMEZONE: 'Asia/Seoul'
  PUPPETEER_SKIP_DOWNLOAD: 'true'
  PUPPETEER_EXECUTABLE_PATH: '/usr/bin/google-chrome-stable'

jobs:
  # 실행 조건 판단 (수정됨)
  orchestrator:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.decision.outputs.should_run }}
      execution_mode: ${{ steps.decision.outputs.execution_mode }}
      target_date: ${{ steps.decision.outputs.target_date }}
      target_time: ${{ steps.decision.outputs.target_time }}
      wait_minutes: ${{ steps.decision.outputs.wait_minutes }}
      skip_reason: ${{ steps.decision.outputs.skip_reason }}
      current_time: ${{ steps.decision.outputs.current_time }}
    
    steps:
    - name: 📊 실행 조건 분석 (주말 로직 수정)
      id: decision
      run: |
        echo "=== 📊 워크플로우 분석 v6.1 ==="
        
        # 현재 KST 시간
        current_kst=$(TZ='${{ env.TIMEZONE }}' date '+%Y-%m-%d %H:%M:%S')
        current_hour=$(TZ='${{ env.TIMEZONE }}' date '+%H')
        current_minute=$(TZ='${{ env.TIMEZONE }}' date '+%M')
        current_day=$(TZ='${{ env.TIMEZONE }}' date '+%u')  # 1=월, 7=일
        
        echo "현재 KST: $current_kst"
        echo "현재 요일: $current_day (1=월요일, 7=일요일)"
        echo "current_time=${current_hour}:${current_minute}" >> $GITHUB_OUTPUT
        
        # 수동 실행 여부
        workflow_dispatch="${{ github.event_name == 'workflow_dispatch' }}"
        mode="${{ github.event.inputs.mode || 'auto' }}"
        target_time="${{ github.event.inputs.target_time || '00:01:00' }}"
        
        # 7일 후 날짜 계산
        target_date=$(TZ='${{ env.TIMEZONE }}' date -d '+7 days' '+%Y-%m-%d')
        target_day=$(TZ='${{ env.TIMEZONE }}' date -d '+7 days' '+%u')
        
        echo "target_date=$target_date" >> $GITHUB_OUTPUT
        echo "target_time=$target_time" >> $GITHUB_OUTPUT
        echo "📅 7일 후 예약 대상: $target_date (요일: $target_day)"
        
        # 실행 여부 결정 (주말 로직 수정!)
        should_run="false"
        execution_mode="skip"
        skip_reason=""
        wait_minutes="6"  # 약 6분 대기 (23:55 → 00:01)
        
        # 핵심 로직: 현재 요일 기준으로 판단
        # 금요일(5) 23:55 → 토요일 예약 → 스킵
        # 토요일(6) 23:55 → 일요일 예약 → 스킵  
        # 일요일(7) 23:55 → 월요일 예약 → 실행
        # 평일(1-4) 23:55 → 평일 예약 → 실행
        
        if [[ "$workflow_dispatch" == "true" ]]; then
          # 수동 실행
          if [[ "$mode" == "force" ]]; then
            should_run="true"
            execution_mode="manual-force"
            echo "🔧 수동 강제 실행 모드"
          elif [[ "$mode" == "test" ]]; then
            should_run="true"
            execution_mode="test"
            echo "🧪 테스트 모드"
          elif [[ "$mode" == "immediate" ]]; then
            should_run="true"
            execution_mode="immediate"
            wait_minutes="0"
            echo "🚀 즉시 실행 모드"
          else
            # auto 모드 - 요일 체크
            if [[ "$current_day" -eq 5 ]] || [[ "$current_day" -eq 6 ]]; then
              skip_reason="금/토요일은 주말 예약이므로 스킵"
              echo "🚫 $skip_reason"
            else
              should_run="true"
              execution_mode="manual-auto"
            fi
          fi
        else
          # 스케줄 실행 - 요일 체크
          if [[ "$current_day" -eq 5 ]]; then
            skip_reason="금요일 → 토요일 예약 스킵"
            echo "🚫 $skip_reason"
          elif [[ "$current_day" -eq 6 ]]; then
            skip_reason="토요일 → 일요일 예약 스킵"
            echo "🚫 $skip_reason"
          else
            # 일요일(7) 또는 평일(1-4)
            should_run="true"
            execution_mode="scheduled"
            echo "✅ 평일 예약 진행 (일요일→월요일 포함)"
          fi
        fi
        
        echo "should_run=$should_run" >> $GITHUB_OUTPUT
        echo "execution_mode=$execution_mode" >> $GITHUB_OUTPUT
        echo "wait_minutes=$wait_minutes" >> $GITHUB_OUTPUT
        echo "skip_reason=$skip_reason" >> $GITHUB_OUTPUT
        
        echo "✅ 분석 완료:"
        echo "  - 실행 여부: $should_run"
        echo "  - 실행 모드: $execution_mode"
        echo "  - 대기 시간: ${wait_minutes}분"
        if [[ "$should_run" == "false" ]]; then
          echo "  - 스킵 이유: $skip_reason"
        fi

  # 메인 예약 실행
  booking-execution:
    needs: orchestrator
    runs-on: ubuntu-latest
    if: needs.orchestrator.outputs.should_run == 'true'
    
    steps:
    - name: 📁 체크아웃
      uses: actions/checkout@v4

    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: 📦 의존성 설치 (최적화)
      run: |
        npm install --package-lock-only
        npm ci --prefer-offline --no-audit --no-fund --progress=false

    - name: ⏰ 정밀 대기 (00:01까지)
      id: timing
      run: |
        wait_minutes="${{ needs.orchestrator.outputs.wait_minutes }}"
        target_time="${{ needs.orchestrator.outputs.target_time }}"
        
        echo "⏰ 대기 시간: ${wait_minutes}분"
        echo "🎯 목표 시간: $target_time"
        
        if [[ "$wait_minutes" -gt 0 ]]; then
          # 목표 시간 파싱
          IFS=':' read -r target_hour target_minute target_second <<< "$target_time"
          target_hour=${target_hour:-0}
          target_minute=${target_minute:-1}
          target_second=${target_second:-0}
          
          echo "⏳ 목표 시간까지 대기 시작..."
          
          # 분 단위 대기
          for ((i=wait_minutes; i>1; i--)); do
            echo "⏳ ${i}분 남음..."
            sleep 60
          done
          
          # 마지막 1분은 초 단위 정밀 제어
          echo "🎯 마지막 1분 - 초 단위 정밀 제어"
          while true; do
            current_hour=$(TZ='${{ env.TIMEZONE }}' date '+%-H')
            current_minute=$(TZ='${{ env.TIMEZONE }}' date '+%-M')
            current_second=$(TZ='${{ env.TIMEZONE }}' date '+%-S')
            
            # 목표 시간 도달 확인
            if [[ "$current_hour" -eq "$target_hour" ]] && \
               [[ "$current_minute" -eq "$target_minute" ]] && \
               [[ "$current_second" -ge "$target_second" ]]; then
              break
            fi
            
            # 목표 시간 경과 확인
            current_total=$((current_hour * 3600 + current_minute * 60 + current_second))
            target_total=$((target_hour * 3600 + target_minute * 60 + target_second))
            
            if [[ "$current_hour" -gt 0 ]] && [[ "$target_hour" -eq 0 ]]; then
              # 자정을 넘어간 경우 처리
              break
            elif [[ $current_total -gt $target_total ]]; then
              echo "⚠️ 목표 시간 경과 - 즉시 실행"
              break
            fi
            
            remaining=$((target_total - current_total))
            if [[ $remaining -le 10 ]] && [[ $remaining -gt 0 ]]; then
              echo "🔥 ${remaining}초..."
            fi
            
            sleep 1
          done
        fi
        
        final_time=$(TZ='${{ env.TIMEZONE }}' date '+%H:%M:%S.%3N')
        echo "🚀 예약 실행 시작: $final_time"

    - name: 🏋️ 필라테스 예약 실행
      env:
        PILATES_USERNAME: ${{ secrets.PILATES_USERNAME }}
        PILATES_PASSWORD: ${{ secrets.PILATES_PASSWORD }}
        TEST_MODE: ${{ needs.orchestrator.outputs.execution_mode == 'test' && 'true' || 'false' }}
        IMMEDIATE_MODE: ${{ needs.orchestrator.outputs.execution_mode == 'immediate' && 'true' || 'false' }}
        EXECUTION_MODE: ${{ needs.orchestrator.outputs.execution_mode }}
        TARGET_TIME: ${{ needs.orchestrator.outputs.target_time }}
        GITHUB_ACTIONS: 'true'
      run: |
        echo "🚀 필라테스 예약 실행"
        echo "📊 실행 모드: $EXECUTION_MODE"
        
        timeout 600 npm run book || {
          exit_code=$?
          if [[ $exit_code -eq 124 ]]; then
            echo "⏰ 타임아웃 (10분)"
          else
            echo "❌ 실행 실패 (코드: $exit_code)"
          fi
          exit $exit_code
        }

    - name: 📊 실행 결과 분석
      if: always()
      run: |
        result_file="booking-result.json"
        if [[ "${{ needs.orchestrator.outputs.execution_mode }}" == "test" ]]; then
          result_file="test-result.json"
        fi
        
        if [ -f "$result_file" ]; then
          echo "📄 결과:"
          cat "$result_file" | jq '.' 2>/dev/null || cat "$result_file"
        else
          echo "❌ 결과 파일 없음"
          exit 1
        fi

    - name: 📸 아티팩트 업로드
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: booking-results-${{ github.run_number }}
        path: |
          screenshots/
          logs/
          *.json
        retention-days: 3
        if-no-files-found: ignore

  # 주말 스킵 알림
  weekend-notification:
    needs: orchestrator
    runs-on: ubuntu-latest
    if: needs.orchestrator.outputs.should_run == 'false'
    
    steps:
    - name: 🚫 스킵 알림
      run: |
        echo "📅 예약 대상: ${{ needs.orchestrator.outputs.target_date }}"
        echo "🚫 스킵 이유: ${{ needs.orchestrator.outputs.skip_reason }}"
        echo "💡 강제 실행: workflow_dispatch에서 mode를 'force'로 설정"
