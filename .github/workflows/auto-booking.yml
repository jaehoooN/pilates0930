name: 🏋️ 필라테스 자동 예약 v3.1

on:
  schedule:
    # 한국시간 23:45 (UTC 14:45) - GitHub Actions 지연을 고려하여 15분 앞당김
    # 실제 예약 실행은 자정(00:00~00:15) 사이에 이루어짐
    - cron: '45 14 * * *'  # UTC 14:45 = KST 23:45
  
  workflow_dispatch:
    inputs:
      test_mode:
        description: '테스트 모드 (실제 예약하지 않음)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'
      force_weekend:
        description: '주말에도 강제 실행 (테스트용)'
        required: false
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  check-weekday:
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      target_date: ${{ steps.check.outputs.target_date }}
      day_name: ${{ steps.check.outputs.day_name }}
    steps:
    - name: 📅 주말 체크 (KST 기준)
      id: check
      run: |
        # 현재 UTC 시간을 KST로 변환하여 7일 후 계산
        echo "현재 UTC: $(date -u)"
        
        # KST 기준 현재 시간 (UTC + 9시간)
        current_kst=$(TZ='Asia/Seoul' date)
        echo "현재 KST: $current_kst"
        
        # KST 기준 현재 요일 확인
        current_day=$(TZ='Asia/Seoul' date '+%u')
        current_day_name=$(TZ='Asia/Seoul' date '+%A')
        echo "현재 요일: $current_day_name (숫자: $current_day)"
        
        # KST 기준 7일 후 날짜 계산
        target_date=$(TZ='Asia/Seoul' date -d '+7 days' '+%Y-%m-%d')
        target_day=$(TZ='Asia/Seoul' date -d '+7 days' '+%u') # 1=월요일, 7=일요일
        day_name_en=$(TZ='Asia/Seoul' date -d '+7 days' '+%A')
        
        # 한국어 요일 변환
        case $day_name_en in
          "Monday") day_name="월요일" ;;
          "Tuesday") day_name="화요일" ;;
          "Wednesday") day_name="수요일" ;;
          "Thursday") day_name="목요일" ;;
          "Friday") day_name="금요일" ;;
          "Saturday") day_name="토요일" ;;
          "Sunday") day_name="일요일" ;;
          *) day_name=$day_name_en ;;
        esac
        
        echo "🎯 예약 대상 날짜: $target_date ($day_name)"
        echo "📊 예약 대상 요일 숫자: $target_day (1=월, 7=일)"
        
        # 주말 체크 (토요일=6, 일요일=7)
        force_weekend="${{ github.event.inputs.force_weekend }}"
        if [[ "$target_day" == "6" || "$target_day" == "7" ]]; then
          if [[ "$force_weekend" == "true" ]]; then
            echo "⚠️ 주말이지만 강제 실행 옵션 활성화"
            echo "should_run=true" >> $GITHUB_OUTPUT
          else
            echo "🚫 주말($day_name)이므로 예약하지 않습니다"
            echo "should_run=false" >> $GITHUB_OUTPUT
          fi
        else
          echo "✅ 평일($day_name) 확인 - 예약 진행"
          echo "should_run=true" >> $GITHUB_OUTPUT
        fi
        
        echo "target_date=$target_date" >> $GITHUB_OUTPUT
        echo "day_name=$day_name" >> $GITHUB_OUTPUT

  pilates-booking:
    needs: check-weekday
    runs-on: ubuntu-latest
    # 안전장치: check-weekday만 성공하면 실행 (wait job 의존성 제거)
    if: needs.check-weekday.outputs.should_run == 'true'
    
    steps:
    - name: 📁 체크아웃
      uses: actions/checkout@v4
    
    - name: 🔧 Node.js 설정
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: 📦 의존성 설치
      run: npm install
    
    - name: ⏰ 스마트 타이밍 제어
      id: timing
      run: |
        echo "⏰ 타이밍 제어 시작"
        
        # 현재 KST 시간 확인
        current_hour=$(TZ='Asia/Seoul' date '+%H')
        current_minute=$(TZ='Asia/Seoul' date '+%M')
        current_time=$(TZ='Asia/Seoul' date '+%H:%M:%S')
        
        echo "📊 현재 KST 시간: $current_time"
        echo "📊 시간: ${current_hour}시 ${current_minute}분"
        
        # 최적 실행 시간 체크 및 대기
        if [[ "$current_hour" == "23" && "$current_minute" -ge "45" ]]; then
          echo "🕚 23:45 이후 - 자정까지 대기"
          
          # 최대 20분 대기 (안전장치)
          max_iterations=40  # 30초 * 40 = 20분
          iteration=0
          
          while [[ $iteration -lt $max_iterations ]]; do
            now_hour=$(TZ='Asia/Seoul' date '+%H')
            now_minute=$(TZ='Asia/Seoul' date '+%M')
            now_second=$(TZ='Asia/Seoul' date '+%S')
            
            echo "⏳ 현재: ${now_hour}:${now_minute}:${now_second} (${iteration}/${max_iterations})"
            
            # 00:00~00:15 사이면 즉시 시작
            if [[ "$now_hour" == "00" && "$now_minute" -le "15" ]]; then
              echo "🎯 최적 시간 도달! 예약 시작 (${now_hour}:${now_minute})"
              break
            fi
            
            # 30초 대기
            sleep 30
            iteration=$((iteration + 1))
          done
          
          if [[ $iteration -ge $max_iterations ]]; then
            echo "⚠️ 최대 대기 시간(20분) 초과 - 강제 시작"
          fi
          
        elif [[ "$current_hour" == "00" && "$current_minute" -le "30" ]]; then
          echo "🎯 이미 최적 시간대 (00:00~00:30) - 바로 시작"
          
        elif [[ "$current_hour" == "23" && "$current_minute" -ge "30" ]]; then
          echo "🎯 적절한 시간대 (23:30~23:44) - 바로 시작"
          
        else
          echo "⚠️ 예상 밖 시간대: ${current_hour}:${current_minute}"
          echo "⚠️ 정상 실행 시간: 23:30~00:30"
          echo "⚠️ 그래도 예약을 진행합니다 (fallback)"
        fi
        
        final_time=$(TZ='Asia/Seoul' date '+%H:%M:%S')
        echo "✅ 예약 시작 시간: $final_time"
        echo "start_time=$final_time" >> $GITHUB_OUTPUT
    
    - name: 🔍 환경 확인
      run: |
        echo "📊 실행 환경:"
        echo "- Node.js: $(node --version)"
        echo "- npm: $(npm --version)"
        echo "- 타임존: $(date)"
        echo "- KST: $(TZ='Asia/Seoul' date)"
        echo "- 예약 시작 시간: ${{ steps.timing.outputs.start_time }}"
        echo "- 예약 날짜: ${{ needs.check-weekday.outputs.target_date }}"
        echo "- 요일: ${{ needs.check-weekday.outputs.day_name }}"
        echo "- 테스트 모드: ${{ github.event.inputs.test_mode }}"
    
    - name: 🏋️ 필라테스 예약 실행
      env:
        PILATES_USERNAME: ${{ secrets.PILATES_USERNAME }}
        PILATES_PASSWORD: ${{ secrets.PILATES_PASSWORD }}
        TEST_MODE: ${{ github.event.inputs.test_mode }}
        GITHUB_ACTIONS: true
        CI: true
      run: |
        echo "🎯 예약 실행 시작 - KST: $(TZ='Asia/Seoul' date '+%H:%M:%S')"
        
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
          echo "⚠️ 테스트 모드로 실행 중..."
          npm run book:test
        else
          echo "🎯 실제 예약 모드로 실행 중..."
          npm run book
        fi
        
        echo "✅ 예약 완료 - KST: $(TZ='Asia/Seoul' date '+%H:%M:%S')"
    
    - name: 📋 결과 확인
      if: always()
      run: |
        echo "📊 예약 결과:"
        echo "📊 완료 시간: $(TZ='Asia/Seoul' date '+%H:%M:%S')"
        
        if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
          if [ -f "test-result.json" ]; then
            echo "✅ 테스트 결과 파일 생성됨"
            cat test-result.json
          else
            echo "❌ 테스트 결과 파일 없음"
          fi
        else
          if [ -f "booking-result.json" ]; then
            echo "✅ 예약 결과 파일 생성됨"
            cat booking-result.json
          else
            echo "❌ 예약 결과 파일 없음"
          fi
        fi
        
        echo ""
        echo "📁 로그 파일:"
        if [ -d "logs" ]; then
          ls -la logs/
          if [[ "${{ github.event.inputs.test_mode }}" == "true" ]]; then
            if [ -f "logs/test.log" ]; then
              echo "=== 테스트 로그 (마지막 20줄) ==="
              tail -20 logs/test.log
            fi
          else
            if [ -f "logs/booking.log" ]; then
              echo "=== 예약 로그 (마지막 20줄) ==="
              tail -20 logs/booking.log
            fi
          fi
        fi
    
    - name: 📸 스크린샷 업로드
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: booking-screenshots-${{ github.run_number }}
        path: |
          screenshots/
          logs/
          booking-result.json
          test-result.json
        retention-days: 7
        if-no-files-found: ignore

  weekend-skip:
    needs: check-weekday
    runs-on: ubuntu-latest
    if: needs.check-weekday.outputs.should_run == 'false'
    
    steps:
    - name: 🚫 주말 스킵 알림
      run: |
        echo "📅 예약 대상 날짜: ${{ needs.check-weekday.outputs.target_date }}"
        echo "📆 요일: ${{ needs.check-weekday.outputs.day_name }}"
        echo "🚫 주말이므로 예약을 건너뜁니다."
        echo "💡 주말에도 실행하려면 'force_weekend' 옵션을 true로 설정하세요."
